{
  "stats": {
    "suites": 3,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-13T21:03:36.586Z",
    "end": "2025-09-13T21:03:36.753Z",
    "duration": 167,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b14810b2-de3e-4f40-96d5-4b30d5d9e934",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "13007f37-54ac-4280-946c-8ff301d6e905",
          "title": "Register Controller",
          "fullFile": "C:\\Users\\alves\\Desktop\\Testes_API_REST_And_Graphql\\test\\rest\\controller\\registerController.test.js",
          "file": "\\test\\rest\\controller\\registerController.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Register Controller\"",
              "fullTitle": "Register Controller \"before each\" hook in \"Register Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "registerUserMock = sinon.stub(userService, 'registerUser');",
              "err": {},
              "uuid": "52496445-d9ad-4d78-aca1-f6e1a0005e65",
              "parentUUID": "13007f37-54ac-4280-946c-8ff301d6e905",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Register Controller\"",
              "fullTitle": "Register Controller \"after each\" hook in \"Register Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "registerUserMock.restore();",
              "err": {},
              "uuid": "df0a1c4e-9016-4352-903d-02969c9041e8",
              "parentUUID": "13007f37-54ac-4280-946c-8ff301d6e905",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "deve retornar 400 quando o usuário já estiver cadastrado",
              "fullTitle": "Register Controller deve retornar 400 quando o usuário já estiver cadastrado",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "registerUserMock.returns(null);\nconst resposta = await request(app)\n    .post('/api/users/register')\n    .send({\n        name: \"Alice\",\n        email: \"alice@email.com\",\n        password: \"123456\"\n    });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error').that.equals('Email já cadastrado');",
              "err": {},
              "uuid": "0d416d61-de4a-484f-b1b0-781b7db0e6c5",
              "parentUUID": "13007f37-54ac-4280-946c-8ff301d6e905",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve retornar 201 quando o usuário for cadastrado",
              "fullTitle": "Register Controller deve retornar 201 quando o usuário for cadastrado",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "registerUserMock.returns({\n        name: \"Priscila\",\n        email: \"priscila@email.com\",\n});\nconst resposta = await request(app)\n    .post('/api/users/register')\n    .send({\n        name: \"Priscila\",\n        email: \"priscila@email.com\",\n        password: \"123456\"\n    });\n\n    expect(resposta.status).to.equal(201);\n    expect(resposta.body).to.have.property('name', 'Priscila');\n    expect(resposta.body).to.have.property('email', 'priscila@email.com');",
              "err": {},
              "uuid": "2654b753-3c5d-4133-b2b9-4e2554c54845",
              "parentUUID": "13007f37-54ac-4280-946c-8ff301d6e905",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0d416d61-de4a-484f-b1b0-781b7db0e6c5",
            "2654b753-3c5d-4133-b2b9-4e2554c54845"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 58,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a76a7cc3-6821-417c-9d2a-d148be001cd4",
          "title": "checkout",
          "fullFile": "C:\\Users\\alves\\Desktop\\Testes_API_REST_And_Graphql\\test\\rest\\external\\checkoutExternal.test.js",
          "file": "\\test\\rest\\external\\checkoutExternal.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "36286533-047d-453f-aaba-3cce579819dc",
              "title": "POST /api/checkout",
              "fullFile": "C:\\Users\\alves\\Desktop\\Testes_API_REST_And_Graphql\\test\\rest\\external\\checkoutExternal.test.js",
              "file": "\\test\\rest\\external\\checkoutExternal.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /api/checkout\"",
                  "fullTitle": "checkout POST /api/checkout \"before all\" hook in \"POST /api/checkout\"",
                  "timedOut": false,
                  "duration": 85,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request(\"http://localhost:3000\")\n    .post('/api/users/login')\n    .send({\n        \"email\": \"bob@email.com\",\n        \"password\": \"123456\"\n    });\ntoken = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "bdfa8312-5c55-4c56-9e90-5a71989f9f6d",
                  "parentUUID": "36286533-047d-453f-aaba-3cce579819dc",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve fazer checkout com boleto",
                  "fullTitle": "checkout POST /api/checkout deve fazer checkout com boleto",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(\"http://localhost:3000\")\n    .post('/api/checkout')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        \"items\": [\n            {\n                \"productId\": 1,\n                \"quantity\": 2\n            },\n                                    {\n                \"productId\": 2,\n                \"quantity\": 1\n            }\n        ],\n        \"freight\": 0,\n        \"paymentMethod\": \"boleto\",\n        \"cardData\": {\n            \"number\": \"string\",\n            \"name\": \"string\",\n            \"expiry\": \"string\",\n            \"cvv\": \"string\"\n        }\n    });\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.have.property('valorFinal', 400);                 \nexpect(resposta.body).to.have.property('paymentMethod', 'boleto');\nresposta.body.items.forEach(item => {\n    expect(item).to.have.property('productId');\n});",
                  "err": {},
                  "uuid": "20cacea2-f364-4665-86c6-25cbbd0e9e71",
                  "parentUUID": "36286533-047d-453f-aaba-3cce579819dc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve fazer checkout com cartão",
                  "fullTitle": "checkout POST /api/checkout deve fazer checkout com cartão",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(\"http://localhost:3000\")\n    .post('/api/checkout')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        \"items\": [\n            {\n                \"productId\": 1,\n                \"quantity\": 5\n            },\n                                    {\n                \"productId\": 2,\n                \"quantity\": 1\n            }\n        ],\n        \"freight\": 0,\n        \"paymentMethod\": \"credit_card\",\n        \"cardData\": {\n            \"number\": \"5443254756576903\",\n            \"name\": \"Jose Santos\",\n            \"expiry\": \"13/07/2027\",\n            \"cvv\": \"657\"\n        }\n    });\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.have.property('valorFinal', 665);                 \nexpect(resposta.body).to.have.property('paymentMethod', 'credit_card');\nresposta.body.items.forEach(item => {\n    expect(item).to.have.property('productId');\n});",
                  "err": {},
                  "uuid": "5a789a92-f5de-411f-afc7-7d6ae1c4862e",
                  "parentUUID": "36286533-047d-453f-aaba-3cce579819dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20cacea2-f364-4665-86c6-25cbbd0e9e71",
                "5a789a92-f5de-411f-afc7-7d6ae1c4862e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}